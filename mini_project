package sem3_ds_ass7;

import java.util.*;

class Contact {
    long mobile_number;
    String name;
    String emailid;

    public Contact(long number, String nm, String email) {
        this.mobile_number = number;
        name = nm;
        emailid = email;
    }

    void display() {
        System.out.println("\tName: " + name + "\n\tMobile Number: " + mobile_number + "\n\tEmail: " + emailid);
    }

    String getName() {
        return name;
    }
}

class ContactBST {
    // Dummy BST class for storing and searching contacts
    // Assuming ContactBST has a search method for finding contacts by name
    public Contact search(String name) {
        // Dummy implementation; replace with actual search logic
        return null;
    }
}

// Custom hash map implementation for storing groups and their contacts
class GroupMap {
    private final int SIZE = 40;
    private String[] groupNames = new String[SIZE];
    private List<Contact>[] groupContacts = new ArrayList[SIZE];

    private int hash(String key) {
        return Math.abs(key.hashCode() % SIZE);
    }

    void put(String groupName) {
        int hashVal = hash(groupName);
        int i = 1;

        while (groupNames[hashVal] != null && !groupNames[hashVal].equals(groupName)) {
            hashVal = (hash(hashVal) + i * i) % SIZE; // Quadratic probing
            i++;
        }

        if (groupNames[hashVal] == null) {
            groupNames[hashVal] = groupName;
            groupContacts[hashVal] = new ArrayList<>();
            System.out.println("Group '" + groupName + "' created.");
        } else {
            System.out.println("Group '" + groupName + "' already exists.");
        }
    }

    private int hash(int hashVal) {
		// TODO Auto-generated method stub
		return 0;
	}

	List<Contact> get(String groupName) {
        int hashVal = hash(groupName);
        int i = 1;

        while (groupNames[hashVal] != null) {
            if (groupNames[hashVal].equals(groupName)) {
                return groupContacts[hashVal];
            }
            hashVal = (hash(hashVal) + i * i) % SIZE; // Quadratic probing
            i++;
        }
        return null; // Group not found
    }
}

class GroupManager {
    private ContactBST contactBST; // Main contact storage in BST
    private GroupMap groupsMap; // Custom GroupMap for storing groups
    Scanner sc = new Scanner(System.in);

    public GroupManager(ContactBST contactBST) {
        this.contactBST = contactBST;
        this.groupsMap = new GroupMap();
    }

    void addGroup() {
        System.out.print("Enter group name to add: ");
        String groupName = sc.nextLine();
        groupsMap.put(groupName);
    }

    void addContactToGroup() {
        System.out.print("Enter group name: ");
        String groupName = sc.nextLine();
        System.out.print("Enter contact name to add: ");
        String contactName = sc.nextLine();

        Contact contact = contactBST.search(contactName);
        if (contact == null) {
            System.out.println("Contact '" + contactName + "' not found.");
            return;
        }

        List<Contact> contacts = groupsMap.get(groupName);
        if (contacts == null) {
            System.out.println("Group '" + groupName + "' not found.");
            return;
        }

        contacts.add(contact);
        System.out.println("Contact '" + contactName + "' added to group '" + groupName + "'.");
    }

    void displayGroup() {
        System.out.print("Enter group name to display: ");
        String groupName = sc.nextLine();

        List<Contact> groupContacts = groupsMap.get(groupName);
        if (groupContacts == null) {
            System.out.println("Group '" + groupName + "' not found.");
            return;
        }

        System.out.println("Contacts in group '" + groupName + "':");
        for (Contact contact : groupContacts) {
            System.out.println(contact.getName());
        }
    }

    void handleTransactions() {
        System.out.print("Enter group name for transactions: ");
        String groupName = sc.nextLine();

        System.out.print("How many transactions do you want to enter? ");
        int transactionCount = sc.nextInt();
        sc.nextLine(); // Consume newline

        for (int i = 1; i <= transactionCount; i++) {
            System.out.println("\nEnter details for transaction " + i + ":");
            System.out.print("Enter name: ");
            String name = sc.nextLine();

            System.out.print("What does " + name + " owe? ");
            double amountOwed = sc.nextDouble();
            sc.nextLine(); // Consume newline

            System.out.print("Who owes " + name + "? ");
            String personOwedTo = sc.nextLine();

            String formattedDateTime = java.time.LocalDateTime.now().toString();
            System.out.println("\nTransaction " + i + " Details:");
            System.out.println("Serial No: " + i);
            System.out.println("Date and Time: " + formattedDateTime);
            System.out.println("Group Name: " + groupName);
            System.out.println("Name: " + name);
            System.out.println("Amount Owed: " + amountOwed);
            System.out.println("Person Owed To: " + personOwedTo);
        }
    }

    void menu() {
        int choice;
        do {
            System.out.println("\nGROUP MANAGER MENU:");
            System.out.println(" 1. ADD GROUP\n 2. ADD CONTACT TO GROUP\n 3. DISPLAY GROUP\n 4. ENTER TRANSACTIONS\n 0. EXIT");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();
            sc.nextLine(); // Consume newline

            switch (choice) {
                case 1 -> addGroup();
                case 2 -> addContactToGroup();
                case 3 -> displayGroup();
                case 4 -> handleTransactions();
                case 0 -> System.out.println("Exiting Group Manager...");
                default -> System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 0);
    }
}

class TripManager {
    private Map<String, List<String>> trips = new HashMap<>();
    private Scanner sc = new Scanner(System.in);

    void addTrip() {
        System.out.print("Enter trip destination: ");
        String destination = sc.nextLine();

        System.out.print("Enter names of participants (comma-separated): ");
        String[] participants = sc.nextLine().split(",");

        List<String> participantList = new ArrayList<>(Arrays.asList(participants));
        trips.put(destination, participantList);

        System.out.println("Trip to " + destination + " added with participants.");
    }

    void displayTrip() {
        System.out.print("Enter trip destination to display: ");
        String destination = sc.nextLine();

        List<String> participants = trips.get(destination);
        if (participants == null) {
            System.out.println("No trip found for destination: " + destination);
            return;
        }

        System.out.println("Trip to " + destination + " includes the following participants:");
        for (String participant : participants) {
            System.out.println("- " + participant.trim());
        }
    }

    void tripMenu() {
        int choice;
        do {
            System.out.println("\nTRIP MANAGER MENU:");
            System.out.println(" 1. ADD TRIP\n 2. DISPLAY TRIP\n 0. EXIT");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();
            sc.nextLine(); // Consume newline

            switch (choice) {
                case 1 -> addTrip();
                case 2 -> displayTrip();
                case 0 -> System.out.println("Exiting Trip Manager...");
                default -> System.out.println("Invalid choice. Please try again.");
            }
        } while (choice != 0);
    }
}

public class Main {
    public static void main(String[] args) {
        ContactBST contactBST = new ContactBST();
        GroupManager groupManager = new GroupManager(contactBST);
        TripManager tripManager = new TripManager();

        Scanner sc = new Scanner(System.in);
        int mainChoice;
        do {
            System.out.println("\nMAIN MENU:");
            System.out.println(" 1. GROUP MANAGER\n 2. TRIP MANAGER\n 0. EXIT");
            System.out.print("Enter your choice: ");
            mainChoice = sc.nextInt();
            sc.nextLine(); // Consume newline

            switch (mainChoice) {
                case 1 -> groupManager.menu();
                case 2 -> tripManager.tripMenu();
                case 0 -> System.out.println("Exiting the program...");
                default -> System.out.println("Invalid choice. Please try again.");
            }
        } while (mainChoice != 0);
    }
}
